#
# Include this in your own .gitconfig by using the
# [include] directive with the path to this file
#
# [include]
#    path = ~/.gitconfig.aliases
#
# If you don't have any existing includes, you can add this via the following command
#
#   git config --global include.path ~/.gitconfig.aliases
#

[alias]
    aliases = "!git config -l | grep ^alias\\. | cut -c 7- | less"      # List aliases
    abort = rebase --abort                                              # Abort the rebase
    amend = commit -a --amend                                           # comit amend
    branches = branch -a                                                # Lists all branches including remote branches
    browse = !git open                                                  # Open the repo in browser
    cm = !git add -A && git commit -m                                   # Stages every file then creates a commit with specified message
    co = checkout                                                       # Switch branches or restore working tree files
    cob = checkout -b                                                   # Create a new branch named <new_branch> and start it at <start_point>
    conflicts = !git diff --name-only --diff-filter=U                   # Show list of files in a conflict state.
    cp = cherry-pick
    default = !git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
    delete = branch -d                                                  # Delete branch
    discard = checkout --                                               # Discard changes to a file
    ec = config --global -e                                             # Edit git config in editor
    find = "!git ls-files | grep -i"                                    # find file by file name

    # A better git log.
    graph = log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Cresetâ€¢ %<(75,trunc)%s (%cN, %cr) %Cred%d' --date-order
    hist = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    history = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    ls-subtrees = !"git log | grep git-subtree-dir | awk '{ print $2 }'"

    latest = "!git ls -1"                                               # Shows the commit message and files changed from the latest commit
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    lost = fsck --lost-found

    # Moves a set of commits from the current branch to another
    migrate = "!f(){ DEFAULT=$(git default); CURRENT=$(git symbolic-ref --short HEAD); git checkout -b $1 && git branch --force $CURRENT ${3-$CURRENT@{u}} && git rebase --onto ${2-$DEFAULT} $CURRENT; }; f"
    new = !git init && git symbolic-ref HEAD refs/heads/main
    open = "!f(){ URL=$(git config remote.origin.url); open ${URL%.git}; }; f"
    pr = "!f(){ URL=$(git config remote.origin.url); open ${URL%.git}/compare/$(git rev-parse --abbrev-ref HEAD); }; f"
    publish = "!f() { git push origin $1 && git push drafts :$1 && git browse; }; f"
    rba = rebase --abort
    rbc = "!f(){ git add -A && git rebase --continue; }; f"
    re = "!f(){ DEFAULT=$(git default); git fetch origin && git rebase origin/${1-$DEFAULT}; }; f"
    remotes = remote -v
    restore = "!f(){ git add -A && git commit -qm 'RESTORE SAVEPOINT'; git reset $1 --hard; }; f"
    ri = "!f(){ DEFAULT=$(git default); git fetch origin && git rebase --interactive origin/${1-$DEFAULT}; }; f"
    save = !git add -A && git commit -m 'SAVEPOINT'
    set-origin = remote set-url origin
    set-upstream = remote set-url upstream
    st = status -s
    stashes = stash list
    sync = !git pull --rebase && git push
    undo = reset HEAD~1 --mixed

    # Unstage a file
    unstage = reset -q HEAD --
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    wip = commit -am "WIP"
    wipe = "!f() { rev=$(git rev-parse ${1-HEAD}); git add -A && git commit --allow-empty -qm 'WIPE SAVEPOINT' && git reset $rev --hard; }; f"

    # Deletes all branches merged into the specified branch (or the default branch if no branch is specified)
    # bclean = "!f() { DEFAULT=$(git default); git branch --merged ${1-$DEFAULT} | grep -v " ${1-$DEFAULT}$" | xargs git branch -d; }; f"

    # Switches to specified branch (or the dafult branch if no branch is specified), runs git up, then runs bclean.
    # bdone = "!f() { DEFAULT=$(git default); git checkout ${1-$DEFAULT} && git up && git bclean ${1-$DEFAULT}; }; f"

    # Lists the files with the most churn
    # churn = !git --no-pager log --name-only --oneline | grep -v ' ' | sort | uniq -c | sort -nr | head
    # cleanup = clean -xdf -e *.DotSettings* -e s3_keys.ps1
